// <auto-generated />
using System;
using FollowUP.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FollowUP.Infrastructure.Migrations
{
    [DbContext(typeof(FollowUPContext))]
    partial class FollowUPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FollowUP.Core.Domain.AccountSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActionsPerDay");

                    b.Property<int>("FollowsPerDay");

                    b.Property<Guid>("InstagramAccountId");

                    b.Property<int>("LikesPerDay");

                    b.Property<int>("MaxIntervalMilliseconds");

                    b.Property<int>("MinIntervalMilliseconds");

                    b.Property<int>("UnfollowsPerDay");

                    b.HasKey("Id");

                    b.HasIndex("InstagramAccountId")
                        .IsUnique();

                    b.ToTable("AccountSettings");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.AccountStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActionsCount");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FollowsCount");

                    b.Property<Guid>("InstagramAccountId");

                    b.Property<int>("LikesCount");

                    b.Property<int>("UnfollowsCount");

                    b.HasKey("Id");

                    b.HasIndex("InstagramAccountId");

                    b.ToTable("AccountStatistics");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.ChildComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("AuthorPk")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid>("CommentId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("LikesCount");

                    b.Property<string>("ProfilePictureUri")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("ChildComments");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("AuthorPk")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("InstagramAccountId");

                    b.Property<int>("LikesCount");

                    b.Property<string>("ParentImageUri")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<string>("ParentMediaId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProfilePictureUri")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("InstagramAccountId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.DailyPromotionPercentage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FollowPromotionId");

                    b.Property<int>("Percentage");

                    b.Property<Guid>("PromotionId");

                    b.Property<Guid>("SingleScheduleDayId");

                    b.Property<Guid?>("UnfollowPromotionId");

                    b.HasKey("Id");

                    b.HasIndex("FollowPromotionId");

                    b.HasIndex("SingleScheduleDayId");

                    b.HasIndex("UnfollowPromotionId");

                    b.ToTable("DailyPromotionPercentages");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.DayGroupConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Order");

                    b.Property<Guid>("ScheduleGroupId");

                    b.Property<Guid>("SingleScheduleDayId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleGroupId");

                    b.HasIndex("SingleScheduleDayId");

                    b.ToTable("DayGroupConnections");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.ExplicitDaySchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("InstagramAccountId");

                    b.Property<Guid>("SingleScheduleDayId");

                    b.HasKey("Id");

                    b.HasIndex("InstagramAccountId");

                    b.HasIndex("SingleScheduleDayId");

                    b.ToTable("ExplicitDaySchedules");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.FollowPromotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid>("InstagramAccountId");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastMediaId")
                        .HasMaxLength(30);

                    b.Property<string>("NextMinId")
                        .HasMaxLength(30);

                    b.Property<DateTime>("NextMinIdDate");

                    b.HasKey("Id");

                    b.HasIndex("InstagramAccountId");

                    b.ToTable("FollowPromotions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FollowPromotion");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.FollowedProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("InstagramAccountId");

                    b.Property<string>("ProfilePk")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("InstagramAccountId");

                    b.ToTable("FollowedProfiles");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.InstagramAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionCooldown");

                    b.Property<string>("AndroidDevice")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("BannedUntil");

                    b.Property<DateTime>("CommentsModuleExpiry");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15);

                    b.Property<string>("Pk")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("PreviousCooldownMilliseconds");

                    b.Property<DateTime>("PromotionsModuleExpiry");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("InstagramAccounts");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.InstagramProxy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<Guid>("InstagramAccountId");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsTaken");

                    b.Property<string>("Password")
                        .HasMaxLength(128);

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Username")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("InstagramAccountId")
                        .IsUnique();

                    b.ToTable("InstagramProxies");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.MonthlyGroupSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeginDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("InstagramAccountId");

                    b.Property<Guid>("ScheduleGroupId");

                    b.HasKey("Id");

                    b.HasIndex("InstagramAccountId");

                    b.HasIndex("ScheduleGroupId");

                    b.ToTable("MonthlyGroupSchedules");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.PromotionComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("InstagramAccountId");

                    b.HasKey("Id");

                    b.HasIndex("InstagramAccountId");

                    b.ToTable("PromotionComments");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Revoked");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.ScheduleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Colour");

                    b.Property<Guid>("InstagramAccountId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("InstagramAccountId");

                    b.ToTable("ScheduleGroups");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.SingleScheduleDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("InstagramAccountId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("InstagramAccountId");

                    b.ToTable("SingleScheduleDays");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.UnfollowPromotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("InstagramAccountId");

                    b.HasKey("Id");

                    b.HasIndex("InstagramAccountId");

                    b.ToTable("UnfollowPromotions");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320);

                    b.Property<string>("FullName")
                        .HasMaxLength(60);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.HashtagPromotion", b =>
                {
                    b.HasBaseType("FollowUP.Core.Domain.FollowPromotion");

                    b.HasDiscriminator().HasValue("HashtagPromotion");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.LocationPromotion", b =>
                {
                    b.HasBaseType("FollowUP.Core.Domain.FollowPromotion");

                    b.HasDiscriminator().HasValue("LocationPromotion");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.ProfilePromotion", b =>
                {
                    b.HasBaseType("FollowUP.Core.Domain.FollowPromotion");

                    b.HasDiscriminator().HasValue("ProfilePromotion");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.AccountSettings", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.InstagramAccount", "InstagramAccount")
                        .WithOne("AccountSettings")
                        .HasForeignKey("FollowUP.Core.Domain.AccountSettings", "InstagramAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.AccountStatistics", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.InstagramAccount", "InstagramAccount")
                        .WithMany("AccountStatistics")
                        .HasForeignKey("InstagramAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.ChildComment", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.Comment", "Comment")
                        .WithMany("ChildComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.Comment", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.InstagramAccount", "InstagramAccount")
                        .WithMany("Comments")
                        .HasForeignKey("InstagramAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.DailyPromotionPercentage", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.FollowPromotion")
                        .WithMany("DailyPromotionPercentages")
                        .HasForeignKey("FollowPromotionId");

                    b.HasOne("FollowUP.Core.Domain.SingleScheduleDay", "SingleScheduleDay")
                        .WithMany("DailyPromotionPercentages")
                        .HasForeignKey("SingleScheduleDayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FollowUP.Core.Domain.UnfollowPromotion")
                        .WithMany("DailyPromotionPercentages")
                        .HasForeignKey("UnfollowPromotionId");
                });

            modelBuilder.Entity("FollowUP.Core.Domain.DayGroupConnection", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.ScheduleGroup", "ScheduleGroup")
                        .WithMany("DayGroupConnections")
                        .HasForeignKey("ScheduleGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FollowUP.Core.Domain.SingleScheduleDay", "SingleScheduleDay")
                        .WithMany("DayGroupConnections")
                        .HasForeignKey("SingleScheduleDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.ExplicitDaySchedule", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.InstagramAccount", "InstagramAccount")
                        .WithMany("ExplicitDaySchedules")
                        .HasForeignKey("InstagramAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FollowUP.Core.Domain.SingleScheduleDay", "SingleScheduleDay")
                        .WithMany("ExplicitDaySchedules")
                        .HasForeignKey("SingleScheduleDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.FollowPromotion", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.InstagramAccount", "InstagramAccount")
                        .WithMany("FollowPromotions")
                        .HasForeignKey("InstagramAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.FollowedProfile", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.InstagramAccount", "InstagramAccount")
                        .WithMany("FollowedProfiles")
                        .HasForeignKey("InstagramAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.InstagramAccount", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.User", "User")
                        .WithMany("InstagramAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.InstagramProxy", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.InstagramAccount", "InstagramAccount")
                        .WithOne("InstagramProxy")
                        .HasForeignKey("FollowUP.Core.Domain.InstagramProxy", "InstagramAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.MonthlyGroupSchedule", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.InstagramAccount", "InstagramAccount")
                        .WithMany("MonthlyGroupSchedules")
                        .HasForeignKey("InstagramAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FollowUP.Core.Domain.ScheduleGroup", "ScheduleGroup")
                        .WithMany("MonthlyGroupSchedules")
                        .HasForeignKey("ScheduleGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.PromotionComment", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.InstagramAccount", "InstagramAccount")
                        .WithMany("PromotionComments")
                        .HasForeignKey("InstagramAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.RefreshToken", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.ScheduleGroup", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.InstagramAccount", "InstagramAccount")
                        .WithMany("ScheduleGroups")
                        .HasForeignKey("InstagramAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.SingleScheduleDay", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.InstagramAccount", "InstagramAccount")
                        .WithMany("SingleScheduleDays")
                        .HasForeignKey("InstagramAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FollowUP.Core.Domain.UnfollowPromotion", b =>
                {
                    b.HasOne("FollowUP.Core.Domain.InstagramAccount", "InstagramAccount")
                        .WithMany()
                        .HasForeignKey("InstagramAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
